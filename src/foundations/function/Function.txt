What is a Function?
    - A named unit of work;
    - A self-contained block of code designed to perform a specific task.
    - Accepts an input, performs some work, and may return an output.
    - Exist to make programs readable (names tell the story), reusable (no copy-paste),
      and testable (small, single-responsibility pieces)

Anatomy of a Function
    Include:
        access, modifier, return type, name, parameters

    Access:
        - Control who can call a function
        - Can be public (anywhere), private (only inside the same class),
          protected (package + subclasses) or package-private (if no keyword is provided)

    Modifiers:
        - keyword that changes how a method can be called, or how it behaves when program runs.
            - Static: static function belongs to the class and can be called without creating an object

    Return:
        - return type tells callers what value they get back (or void - if nothing is returned)
        - Note: Returning a value is not the same as Printing to console.
                Printing returns no value to the caller.

Parameters & Arguments
    - Parameters are the names and types a function declares as its inputs
    - Arguments are the actual values passed when a function is called
    - Function Signature = function name + parameter type & order

